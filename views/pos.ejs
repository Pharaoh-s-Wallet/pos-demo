<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Products</h5>
            </div>
            <div class="card-body">
                <div class="row row-cols-1 row-cols-md-3 g-4" id="products-grid">
                    <% products.forEach(function(product) { %>
                        <div class="col">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><%= product.name %></h5>
                                    <p class="card-text"><%= product.description %></p>
                                    <p class="card-text"><strong>$<%= product.price.toFixed(2) %></strong></p>
                                    <button class="btn btn-primary add-to-cart" 
                                            data-id="<%= product.id %>"
                                            data-name="<%= product.name %>"
                                            data-price="<%= product.price %>">
                                        Add to Cart
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Current Order</h5>
            </div>
            <div class="card-body">
                <div id="cart-items">
                    <!-- Cart items will be dynamically added here -->
                </div>
                <hr>
                <div class="d-flex justify-content-between">
                    <h5>Total:</h5>
                    <h5 id="cart-total">$0.00</h5>
                </div>
                <button class="btn btn-success w-100 mt-3" id="checkout-btn">Create Order</button>
            </div>
        </div>
    </div>
</div>

<!-- Order Created Modal -->
<div class="modal fade" id="orderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Order Created</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center">
                    <div id="qrcode-container"></div>
                    <p class="mt-3">Scan this QR code with your NZDD wallet to pay</p>
                    <p>Order Total: <strong id="modal-total"></strong></p>
                    <div id="payment-status" class="alert alert-info">
                        Waiting for payment...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let cart = [];
const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
});

function updateCart() {
    const cartContainer = document.getElementById('cart-items');
    const totalElement = document.getElementById('cart-total');
    let total = 0;
    
    cartContainer.innerHTML = cart.map(item => {
        total += item.price * item.quantity;
        return `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div>
                    <h6 class="mb-0">${item.name}</h6>
                    <small class="text-muted">${formatter.format(item.price)} Ã— ${item.quantity}</small>
                </div>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-secondary" onclick="updateQuantity(${item.id}, ${item.quantity - 1})">-</button>
                    <button class="btn btn-outline-secondary" onclick="updateQuantity(${item.id}, ${item.quantity + 1})">+</button>
                </div>
            </div>
        `;
    }).join('');
    
    totalElement.textContent = formatter.format(total);
}

function updateQuantity(productId, newQuantity) {
    if (newQuantity <= 0) {
        cart = cart.filter(item => item.id !== productId);
    } else {
        const item = cart.find(item => item.id === productId);
        if (item) {
            item.quantity = newQuantity;
        }
    }
    updateCart();
}

document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', () => {
        const id = parseInt(button.dataset.id);
        const existing = cart.find(item => item.id === id);
        
        if (existing) {
            existing.quantity++;
        } else {
            cart.push({
                id,
                name: button.dataset.name,
                price: parseFloat(button.dataset.price),
                quantity: 1
            });
        }
        
        updateCart();
    });
});

document.getElementById('checkout-btn').addEventListener('click', async () => {
    if (cart.length === 0) return;

    try {
        const response = await fetch('/api/orders', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                items: cart.map(item => ({
                    productId: item.id,
                    quantity: item.quantity
                }))
            })
        });

        const order = await response.json();
        
        // Show modal with QR code
        document.getElementById('qrcode-container').innerHTML = `<img src="${order.qrCode}" alt="Payment QR Code">`;
        document.getElementById('modal-total').textContent = formatter.format(order.totalAmount);
        
        const modal = new bootstrap.Modal(document.getElementById('orderModal'));
        modal.show();

        // Connect to WebSocket for payment status updates
        const ws = new WebSocket(`ws://${window.location.host}?clientId=${encodeURIComponent(order.orderId)}`);
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            const statusElement = document.getElementById('payment-status');
            
            console.log('WebSocket message received:', data);
            
            if (data.type === 'approval_success') {
                statusElement.className = 'alert alert-info';
                statusElement.textContent = data.message || 'Approval received, processing payment...';
            }
            else if (data.type === 'payment_success' || data.status === 'paid') {
                statusElement.className = 'alert alert-success';
                statusElement.textContent = data.message || 'Payment received!';
                cart = [];
                updateCart();
                setTimeout(() => modal.hide(), 3000);
            }
        };
    } catch (error) {
        console.error('Error creating order:', error);
        alert('Failed to create order. Please try again.');
    }
});
</script> 